/* THIS IS AUTOGENERATED FILE */
/* DO NOT EDIT!!! */
#ifndef _H_CONFIG
#define _H_CONFIG
#include <coyaml_hdr.h>
#include <ev.h>
#include "msgqueue.h"
#include "namedoutput.h"

typedef enum {
    CONFIG_NoRetry = 0,
    CONFIG_RetryFirst = 1,
    CONFIG_RetryLast = 2,
} config_retrymode_tag_t;

typedef struct config_retrymode_s {
    config_retrymode_tag_t mode;
    long count;
} config_retrymode_t;

typedef enum {
    CONFIG_zmq_Bind = 1,
    CONFIG_zmq_Connect = 2,
} config_zmqaddr_tag_t;

typedef struct config_zmqaddr_s {
    config_zmqaddr_tag_t kind;
    char * value;
    size_t value_len;
} config_zmqaddr_t;

typedef enum {
    CONFIG_auto = 0,
    CONFIG_zmq_Sub = 6,
    CONFIG_zmq_Rep = 2,
    CONFIG_zmq_Req = 1,
    CONFIG_zmq_Pull = 4,
    CONFIG_zmq_Pub = 5,
    CONFIG_zmq_Push = 3,
} config_zmqsocket_tag_t;

typedef struct config_zmqsocket_s {
    config_zmqsocket_tag_t kind;
    struct config_a_zmqaddr_s * value;
    size_t value_len;
    unsigned long hwm;
    char * identity;
    size_t identity_len;
    unsigned long swap;
    unsigned long affinity;
    unsigned long sndbuf;
    unsigned long rcvbuf;
    unsigned long linger;
    void * _sock;
    struct ev_io _watch;
    struct queue_s _queue;
} config_zmqsocket_t;

typedef struct config_a_zmqaddr_s {
    coyaml_arrayel_head_t head;
    config_zmqaddr_t value;
} config_a_zmqaddr_t;
#define CONFIG_ZMQADDR_LOOP(name, source) for(config_a_zmqaddr_t *name = source; name; name = name->head.next)

typedef int config_namedoutput_tag_t;

typedef struct config_namedoutput_s {
    config_namedoutput_tag_t kind;
    struct config_a_zmqaddr_s * value;
    size_t value_len;
    unsigned long hwm;
    char * identity;
    size_t identity_len;
    unsigned long swap;
    unsigned long affinity;
    unsigned long sndbuf;
    unsigned long rcvbuf;
    unsigned long linger;
    void * _sock;
    struct ev_io _watch;
    struct queue_s _queue;
    unsigned long sync_interval;
    namedoutput_t _int;
} config_namedoutput_t;

typedef struct config_listenaddr_s {
    char * host;
    size_t host_len;
    long port;
    char * unix_socket;
    size_t unix_socket_len;
    long fd;
    long backlog;
} config_listenaddr_t;

typedef struct config_StaticResponse_s {
    long code;
    char * status;
    size_t status_len;
    struct config_m_string_string_s * headers;
    size_t headers_len;
    char * body;
    size_t body_len;
} config_StaticResponse_t;

typedef struct config_m_string_string_s {
    coyaml_mappingel_head_t head;
    char * key;
    size_t key_len;
    char * value;
    size_t value_len;
} config_m_string_string_t;
#define CONFIG_STRING_STRING_LOOP(name, source) for(config_m_string_string_t *name = source; name; name = name->head.next)

typedef enum {
    CONFIG_Hash1024 = 33,
    CONFIG_Hash = 32,
    CONFIG_Exact = 16,
    CONFIG_Suffix = 18,
    CONFIG_Prefix = 17,
    CONFIG_TrySerially = 49,
    CONFIG_Leaf = 0,
} config_RoutingType_tag_t;

typedef struct config_RoutingType_s {
    config_RoutingType_tag_t kind;
    char * value;
    size_t value_len;
} config_RoutingType_t;

typedef enum {
    CONFIG_Cookie = 5,
    CONFIG_Nothing = 0,
    CONFIG_Header = 4,
    CONFIG_Method = 3,
    CONFIG_Path = 2,
    CONFIG_Uri = 1,
    CONFIG_Body = 6,
    CONFIG_IP = 7,
} config_RequestField_tag_t;

typedef struct config_RequestField_s {
    config_RequestField_tag_t kind;
    char * value;
    size_t value_len;
    long _field_index;
} config_RequestField_t;

typedef struct config_Route_s {
    struct {
        struct config_a_string_s * method;
        size_t method_len;
        long max_body_size;
    } limits;
    struct config_m_string_string_s * headers;
    size_t headers_len;
    struct {
        char * format;
        size_t format_len;
        char * filename;
        size_t filename_len;
    } access_log;
    struct {
        config_StaticResponse_t default_;
        config_StaticResponse_t maintainance;
        config_StaticResponse_t not_found;
        config_StaticResponse_t method_not_allowed;
        config_StaticResponse_t forbidden;
        config_StaticResponse_t internal_error;
        config_StaticResponse_t service_unavailable;
        config_StaticResponse_t gateway_timeout;
    } responses;
    int maintainance;
    struct {
        int enabled;
        char * root;
        size_t root_len;
        long strip_dirs;
        int dir_index;
        char * index_file;
        size_t index_file_len;
        char * single_uri;
        size_t single_uri_len;
        int restrict_root;
        struct config_a_Dir_s * restrict_dirs;
        size_t restrict_dirs_len;
        struct config_a_string_s * deny_suffixes;
        size_t deny_suffixes_len;
        struct config_a_string_s * deny_prefixes;
        size_t deny_prefixes_len;
        int gzip_enabled;
        long max_size;
    } static_;
    struct {
        int enabled;
        struct config_m_string_zmqsocket_s * routes;
        size_t routes_len;
        char * root;
        size_t root_len;
        long strip_dirs;
        int follow_symlinks;
        long cache_age;
    } templates;
    struct {
        int enabled;
        config_zmqsocket_t socket;
        struct config_a_RequestField_s * contents;
        size_t contents_len;
        long timeout;
        config_retrymode_t retry;
    } zmq_forward;
    struct {
        int enabled;
        struct config_a_string_s * allow_origins;
        size_t allow_origins_len;
        char * access_control_max_age;
        size_t access_control_max_age_len;
        unsigned long idle_ping_interval;
        config_zmqsocket_t subscribe;
        config_zmqsocket_t forward;
        struct config_m_string_namedoutput_s * named_outputs;
        size_t named_outputs_len;
        unsigned long heartbeat_interval;
        unsigned long topic_hash_size;
        unsigned long queue_limit;
        unsigned long max_backend_queue;
        struct {
            int enabled;
            struct {
                struct {
                    int enabled;
                } echo;
                struct {
                    int enabled;
                } timestamp;
                struct {
                    int enabled;
                } paused;
                struct {
                    int enabled;
                    char * name;
                    size_t name_len;
                    char * topic_name;
                    size_t topic_name_len;
                    unsigned long limit;
                } subscribe;
                struct {
                    int enabled;
                    char * name;
                    size_t name_len;
                    char * topic_name;
                    size_t topic_name_len;
                } unsubscribe;
                struct {
                    int enabled;
                    char * name;
                    size_t name_len;
                    char * topic_name;
                    size_t topic_name_len;
                } publish;
            } commands;
        } frontend_commands;
        int disable_websocket;
        struct {
            int enabled;
            int timestamps;
            unsigned long queue_limit;
            unsigned long max_bundle;
            unsigned long inactivity_timeout;
            unsigned long max_timeout;
        } polling_fallback;
        struct ev_timer _heartbeat_timer;
        void * _topics;
    } websocket;
    struct config_a_string_s * match;
    size_t match_len;
    config_RoutingType_t routing;
    config_RequestField_t routing_by;
    struct config_m_string_Route_s * map;
    size_t map_len;
    struct config_a_Route_s * children;
    size_t children_len;
    void * _child_match;
} config_Route_t;

typedef struct config_a_string_s {
    coyaml_arrayel_head_t head;
    char * value;
    size_t value_len;
} config_a_string_t;
#define CONFIG_STRING_LOOP(name, source) for(config_a_string_t *name = source; name; name = name->head.next)

typedef struct config_a_Dir_s {
    coyaml_arrayel_head_t head;
    char * value;
    size_t value_len;
} config_a_Dir_t;
#define CONFIG_DIR_LOOP(name, source) for(config_a_Dir_t *name = source; name; name = name->head.next)

typedef struct config_m_string_zmqsocket_s {
    coyaml_mappingel_head_t head;
    char * key;
    size_t key_len;
    config_zmqsocket_t value;
} config_m_string_zmqsocket_t;
#define CONFIG_STRING_ZMQSOCKET_LOOP(name, source) for(config_m_string_zmqsocket_t *name = source; name; name = name->head.next)

typedef struct config_a_RequestField_s {
    coyaml_arrayel_head_t head;
    config_RequestField_t value;
} config_a_RequestField_t;
#define CONFIG_REQUESTFIELD_LOOP(name, source) for(config_a_RequestField_t *name = source; name; name = name->head.next)

typedef struct config_m_string_namedoutput_s {
    coyaml_mappingel_head_t head;
    char * key;
    size_t key_len;
    config_namedoutput_t value;
} config_m_string_namedoutput_t;
#define CONFIG_STRING_NAMEDOUTPUT_LOOP(name, source) for(config_m_string_namedoutput_t *name = source; name; name = name->head.next)

typedef struct config_m_string_Route_s {
    coyaml_mappingel_head_t head;
    char * key;
    size_t key_len;
    config_Route_t value;
} config_m_string_Route_t;
#define CONFIG_STRING_ROUTE_LOOP(name, source) for(config_m_string_Route_t *name = source; name; name = name->head.next)

typedef struct config_a_Route_s {
    coyaml_arrayel_head_t head;
    config_Route_t value;
} config_a_Route_t;
#define CONFIG_ROUTE_LOOP(name, source) for(config_a_Route_t *name = source; name; name = name->head.next)

typedef struct config_logging_s {
    long level;
    long warning_timeout;
    char * filename;
    size_t filename_len;
} config_logging_t;

typedef struct config_main_s {
    coyaml_head_t head;
    struct {
        long ident;
        long zmq_io_threads;
        long disk_io_threads;
        struct {
            config_zmqsocket_t socket;
        } control;
        long max_requests;
        long max_websockets;
        struct config_a_listenaddr_s * listen;
        size_t listen_len;
        double network_timeout;
        struct {
            int no_warnings;
            char * file;
            size_t file_len;
            struct config_m_string_string_s * extra;
            size_t extra_len;
            char * no_extension;
            size_t no_extension_len;
            char * default_type;
            size_t default_type_len;
        } mime_types;
        struct {
            long level;
            long warning_timeout;
            char * filename;
            size_t filename_len;
        } error_log;
        struct {
            long backend_messages;
            long frontend_messages;
            long subscriptions;
        } pools;
    } Server;
    struct {
        char * host_name;
        size_t host_name_len;
        char * application_name;
        size_t application_name_len;
        config_zmqsocket_t socket;
        unsigned long interval;
    } Estp;
    config_Route_t Routing;
} config_main_t;

typedef struct config_a_listenaddr_s {
    coyaml_arrayel_head_t head;
    config_listenaddr_t value;
} config_a_listenaddr_t;
#define CONFIG_LISTENADDR_LOOP(name, source) for(config_a_listenaddr_t *name = source; name; name = name->head.next)

coyaml_cmdline_t config_cmdline;
config_main_t * config_init(config_main_t * target);
coyaml_context_t * config_context(coyaml_context_t * ctx, config_main_t * target);
void config_free(config_main_t * target);
config_main_t * config_load(config_main_t * target, int argc, char ** argv);
#endif //_H_CONFIG
